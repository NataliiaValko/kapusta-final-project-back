{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "Kapu$ta Project",
    "description": "This is a back-end documentation for [Kapu$ta Project](https://cabbage-project.netlify.app/) performed by Adamants team.\nYou can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "noreply.wallet.adamants@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "basePath": "https://adamants-wallet-project-back.herokuapp.com/api",
  "servers": [
    {
      "url": "https://adamants-wallet-project-back.herokuapp.com/api",
      "description": "Production live server"
    },
    {
      "url": "http://localhost:4000/api",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "User's auth operations"
    },
    {
      "name": "Users",
      "description": "Users operations"
    },
    {
      "name": "Transactions",
      "description": "Transactions operations"
    },
    {
      "name": "Developers",
      "description": "Developers operations"
    }
  ],
  "paths": {
    "/users/registration": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register new user",
        "description": "This can only be done by not already registered user.",
        "operationId": "registration",
        "produces": ["application/json"],
        "requestBody": {
          "required": true,
          "description": "Valid user registration body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationLoginRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful user registration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "User email",
                          "example": "john.doe@gmail.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User with same email already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "User with same email already exists.",
                    "status": "Error",
                    "code": "400"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "example": {
                "message": "Internal server error.",
                "status": "Error",
                "code": "500"
              }
            }
          }
        }
      }
    },
    "/users/verify/{verificationToken}": {
      "get": {
        "tags": ["Users"],
        "summary": "Verify user email",
        "description": "This can only be done by registered user.",
        "operationId": "verify",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "verificationToken",
            "type": "string",
            "description": "User verification token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Verification successfull",
            "schema": {
              "example": {
                "message": "Verification successfull"
              }
            }
          },
          "404": {
            "description": "User not found or email already verified",
            "schema": {
              "example": {
                "message": "User not found",
                "status": "Error",
                "code": "404"
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login user into the application",
        "description": "This can only be done by user with verified email.",
        "operationId": "login",
        "produces": ["application/json"],
        "requestBody": {
          "required": true,
          "description": "Valid user registration body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationLoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful user login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Email or password is wrong",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Email or password is wrong",
                    "status": "Error",
                    "code": "400"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Email is not verified",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "User email is not verified",
                    "status": "Error",
                    "code": "403"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Refresh tokens",
        "description": "Refresh user tokens in case of 401 Unauthorized server response",
        "operationId": "refresh",
        "produces": ["application/json"],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "type": "object",
          "required": true,
          "description": "Valid user refresh body object with refresh token",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "User's refresh token from server",
                    "example": "eyJhbGciOiJIUzAqeqwIsInR5cCWqwekpXVC.eyJwZX"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful refresh",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error in refresh/access tokens",
            "schema": {
              "example": {
                "message": "Bad request",
                "status": "Error",
                "code": "400"
              }
            }
          },
          "401": {
            "description": "Refresh token expired and user needs to log in",
            "schema": {
              "example": {
                "message": "Unauthorized",
                "status": "Error",
                "code": "401"
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "get": {
        "tags": ["Auth"],
        "summary": "Logout current logged in user",
        "description": "Logout current logged in user",
        "operationId": "logout",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "requestBody": {
          "type": "object",
          "required": true,
          "description": "Valid user logout body object with refresh token",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "User's refresh token from server",
                    "example": "eyJhbGciOiJIUzAqeqwIsInR5cCWqwekpXVC.eyJwZX"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful logout"
          },
          "400": {
            "description": "Error in access/refresh token in header/cookie",
            "schema": {
              "example": {
                "message": "Bad request",
                "status": "Error",
                "code": "400"
              }
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "example": {
                "message": "User not found",
                "status": "Error",
                "code": "404"
              }
            }
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": ["Auth"],
        "summary": "Google authorization",
        "description": "Google authorization",
        "operationId": "google-auth",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful authorization with Google",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGoogleAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "example": {
                "message": "Bad request",
                "status": "Error",
                "code": "400"
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Get current user info",
        "description": "This can only be done by not already logged in user.",
        "operationId": "current",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful request to get user info ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Unauthorized: TokenExpiredError: jwt expired.",
                    "status": "Error",
                    "code": "401"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update user information",
        "description": "This can only be done by logged in user.",
        "operationId": "update",
        "security": [{ "Bearer": [] }],

        "produces": ["application/json"],
        "requestBody": {
          "type": "object",
          "description": "Valid user update body object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful user update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Some body validation errors / Updating of user balance not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "User balance is already setted",
                    "status": "Error",
                    "code": "400"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/avatar": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update user avatar with avatar file in from-data",
        "description": "This can only be done by logged in user.",
        "operationId": "avatar",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "formData",
            "name": "avatar",
            "type": "file",
            "description": "Single image file with valid MIME-type",
            "required": true,
            "schema": {
              "type": "file",
              "required": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful user avatar update",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "success",
                    "data": {
                      "avatar": "https://drive.google.com/drive/folders/162F92a-sm6MX8k96Jc59KCtf0NtXkdM4"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Some file validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Wrong MIME-type",
                    "status": "Error",
                    "code": "400"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/invite": {
      "post": {
        "tags": ["Users"],
        "summary": "Invite friend to join application",
        "description": "User can invite friend to this Application. Friend will receive invitation email with link.",
        "operationId": "invite",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "requestBody": {
          "type": "object",
          "description": "Valid invitation body object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "friendEmail": {
                    "type": "string",
                    "description": "Valid friend`s email with min 2 domains",
                    "format": "email",
                    "example": "denis.bestmentor@gmail.com"
                  },
                  "friendName": {
                    "type": "string",
                    "description": "Valid friend name",
                    "example": "Denis Hvorostyaniy"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful friend invitation",
            "schema": {
              "example": {
                "message": "Invitation successful."
              }
            }
          },
          "400": {
            "description": "Some body errors (no friendEmail or friendName).",
            "schema": {
              "example": {
                "message": "friendEmail/friendName is required.",
                "status": "Error",
                "code": "400"
              }
            }
          }
        }
      }
    },
    "/users/phone-verify": {
      "patch": {
        "tags": ["Users"],
        "summary": "Verify user's phone by sms-service",
        "description": "This can only be done by logged in user. First time client sends ONLY phone number. Than user receives code in SMS. Secondly, client sends same phone number and verification code as well.",
        "operationId": "phone-verify",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "requestBody": {
          "type": "object",
          "description": "Valid phone number with/without verification code",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone": {
                    "type": "string",
                    "description": "Valid phone number",
                    "required": true,
                    "example": "+380501234567"
                  },
                  "code": {
                    "type": "string",
                    "required": false,
                    "description": "Verification 4-digit code sent in SMS on user's phone number by Twilio message-service",
                    "example": "1234"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful user's phone verification",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Verification successfull"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Code sent to user's phone number",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Code sent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Some phone/code validation errors, Phone number already verified",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Phone number already verified",
                    "status": "Error",
                    "code": "400"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get all user's transactions with/without parameters",
        "description": "Get all user's transactions with/without parameters of choosing (by type, category, start date and end date)",
        "operationId": "get-transactions",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "description": "Type of user's transactions",
              "required": false,
              "enum": ["income", "expense"],
              "example": "income"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "description": "Category of user's transactions",
              "required": false,
              "enum": [
                "salary",
                "additional",
                "products",
                "alcohol",
                "entertainment",
                "healthy",
                "transport",
                "home",
                "technic",
                "communication",
                "hobby",
                "education",
                "other"
              ],
              "example": "salary"
            }
          },
          {
            "in": "query",
            "name": "comment",
            "schema": {
              "type": "string",
              "description": "Description (comment) of user's transactions",
              "required": false,
              "example": "beer"
            }
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "description": "Date parameter for definition start date for searching in all user's transactions",
              "required": false,
              "example": "2021-01-01"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "description": "Date parameter for definition end date for searching in all user's transactions",
              "required": false,
              "example": "2021-12-01"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful user's searching transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "JOI error message: some parameters validation errors",
                    "status": "Error",
                    "code": "400"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}": {
      "patch": {
        "tags": ["Transactions"],
        "summary": "Update user's single transaction by Id",
        "description": "Update user's single transaction by Id. Allow to edit category, comment, amount, date. NB! not allows to update transaction type.",
        "operationId": "update-transactions",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "type": "string",
            "description": "Transaction ID",
            "required": true
          }
        ],
        "requestBody": {
          "type": "object",
          "description": "Valid transaction update body object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful transactions update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "JOI error message: some parameters validation errors",
                    "status": "Error",
                    "code": "400"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/:{transactionId}": {
      "delete": {
        "tags": ["Transactions"],
        "summary": "Delete user's single transaction by Id",
        "description": "Delete user's single transaction by Id.",
        "operationId": "delete-transaction",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "type": "string",
            "description": "Transaction ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful transaction delete"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Transaction not found",
                    "status": "Error",
                    "code": "404"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/categories": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get user's transactions details with date parameters",
        "description": "Get user's transactions detailed information with counting of amount by categories with date parameters.",
        "operationId": "categories-transactions",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "description": "Date parameter for definition start date for searching in all user's transactions",
              "required": false,
              "example": "2021-01-01"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "description": "Date parameter for definition end date for searching in all user's transactions",
              "required": false,
              "example": "2021-12-01"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful details of transactions response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Detailed transactions response",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "Detailed transactions data",
                      "example": [
                        {
                          "category": "salary",
                          "total": 18000,
                          "type": "income",
                          "details": [
                            {
                              "salary": 10000,
                              "additional": 8000
                            }
                          ]
                        },
                        {
                          "category": "products",
                          "total": 1200,
                          "type": "expense",
                          "details": [
                            {
                              "chips": 300,
                              "potato": 500,
                              "tomato": 400
                            }
                          ]
                        },
                        {
                          "category": "hobby",
                          "total": 2200,
                          "type": "expense",
                          "details": [
                            {
                              "flute": 200,
                              "dance": 1000,
                              "art": 1000
                            }
                          ]
                        },
                        {
                          "total": 16800
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Some parameters validation errors / Cannot update transaction's type",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "JOI error message: some parameters validation errors",
                    "status": "Error",
                    "code": "400"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/developers/": {
      "get": {
        "tags": ["Developers"],
        "summary": "Get all developers",
        "description": "Get array of devs - information about developers",
        "operationId": "get-developers",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevelopersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRegistrationLoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Valid email with min 2 domains",
            "required": true,
            "example": "john.doe@gmail.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "required": true,
            "description": "Valid password length: 8-12, must contain  lowerCase: 1,  upperCase: 1, numeric: 1, symbol: 1,",
            "example": "Hello123-"
          }
        }
      },
      "UserLoginResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User email",
                    "example": "john.doe@gmail.com"
                  },
                  "fullName": {
                    "type": "object",
                    "properties": {
                      "firstName": {
                        "type": "string",
                        "description": "User first name",
                        "default": null,
                        "example": "John"
                      },
                      "lastName": {
                        "type": "string",
                        "description": "User last name",
                        "default": null,
                        "example": "Doe"
                      }
                    }
                  },
                  "balance": {
                    "type": "integer",
                    "description": "User balance",
                    "default": 0,
                    "example": 15000
                  },
                  "isBalanceSetted": {
                    "type": "boolean",
                    "description": "This field shows that user set up his balance",
                    "default": false,
                    "example": true
                  },
                  "phone": {
                    "type": "string",
                    "description": "User phone number",
                    "default": null,
                    "example": "+38(050)1234567"
                  },
                  "avatar": {
                    "type": "string",
                    "description": "User avatar",
                    "default": null,
                    "example": "https://www.google.com/imgres?imgurl=https%3A%2F%2Fupload.wikimedia.org"
                  },
                  "settings": {
                    "type": "object",
                    "properties": {
                      "language": {
                        "type": "string",
                        "description": "User's language",
                        "default": "ru",
                        "enum": ["ru", "en", "ua"],
                        "example": "en"
                      },
                      "theme": {
                        "type": "string",
                        "description": "User's application theme",
                        "default": "light",
                        "enum": ["light", "dark"],
                        "example": "light"
                      },
                      "currency": {
                        "type": "string",
                        "description": "User's selected currency",
                        "default": "UAH",
                        "enum": ["UAH", "USD", "RUB", "EUR"],
                        "example": "UAH"
                      }
                    }
                  }
                }
              },
              "accessToken": {
                "type": "string",
                "description": "User's access token from server",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYX"
              },
              "refreshToken": {
                "type": "string",
                "description": "User's refresh token from server",
                "example": "eyJhbGciOiJIUzAqeqwIsInR5cCWqwekpXVC.eyJwZX"
              }
            }
          }
        }
      },
      "UserGoogleAuthResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "User email",
                "example": "john.doe@gmail.com"
              },
              "fullName": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "User first name",
                    "default": null,
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "User last name",
                    "default": null,
                    "example": "Doe"
                  }
                }
              }
            }
          },
          "accessToken": {
            "type": "string",
            "description": "User's access token from server",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYX"
          },
          "refreshToken": {
            "type": "string",
            "description": "User's refresh token from server",
            "example": "eyJhbGciOiJIUzAqeqwIsInR5cCWqwekpXVC.eyJwZX"
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string",
                "description": "User first name",
                "default": null,
                "example": "John"
              },
              "lastName": {
                "type": "string",
                "description": "User last name",
                "default": null,
                "example": "Doe"
              }
            }
          },
          "balance": {
            "type": "integer",
            "format": "int32",
            "description": "User balance !!! Allow to be set up ONLY one time after registration !!!",
            "default": 0,
            "example": 15000
          },
          "phone": {
            "type": "string",
            "description": "User phone number",
            "default": null,
            "example": "+38(050)1234567"
          },
          "avatar": {
            "type": "string",
            "description": "User avatar",
            "default": null,
            "example": "https://www.google.com/imgres?imgurl=https%3A%2F%2Fupload.wikimedia.org"
          },
          "settings": {
            "type": "object",
            "properties": {
              "language": {
                "type": "string",
                "description": "User's language",
                "default": "ru",
                "enum": ["ru", "en", "ua"],
                "example": "en"
              },
              "theme": {
                "type": "string",
                "description": "User's application theme",
                "default": "light",
                "enum": ["light", "dark"],
                "example": "light"
              },
              "currency": {
                "type": "string",
                "description": "User's selected currency",
                "default": "UAH",
                "enum": ["UAH", "USD", "RUB", "EUR"],
                "example": "UAH"
              }
            }
          }
        }
      },
      "TransactionsResponse": {
        "type": "object",
        "description": "All user's transactions",
        "properties": {
          "transactions": {
            "type": "object",
            "description": "Transactions of user",
            "properties": {
              "total": {
                "type": "integer",
                "format": "int32",
                "description": "Total sum of all showed transactions (adding income, subtracting expense)",
                "example": 12300
              },
              "balance": {
                "type": "integer",
                "format": "int32",
                "description": "User's current balance",
                "example": 25200
              },
              "transaction": {
                "type": "object",
                "description": "User's current balance",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["expense", "income"],
                    "description": "Type of user's transaction",
                    "example": "expense"
                  },
                  "category": {
                    "type": "string",
                    "enum": [
                      "salary",
                      "additional",
                      "products",
                      "alcohol",
                      "entertainment",
                      "healthy",
                      "transport",
                      "home",
                      "technic",
                      "communication",
                      "hobby",
                      "education",
                      "other"
                    ],
                    "description": "Category of user's transaction",
                    "example": "products"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Description of user's transaction",
                    "example": "Pork",
                    "default": ""
                  },
                  "amount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Amount of user's transaction",
                    "example": 1000
                  },
                  "date": {
                    "type": "string",
                    "description": "Date of user's transaction",
                    "example": "2021-12-12"
                  }
                }
              }
            },
            "example": [
              {
                "_id": "61994bf6c2b3164f924883dc",
                "type": "income",
                "category": "Salary",
                "comment": "My salary",
                "amount": 10000,
                "date": "2021-02-01",
                "owner": "61994b7dc2b3164f924883cc",
                "createdAt": "2021-11-20T19:26:46.106Z",
                "updatedAt": "2021-11-20T19:26:46.106Z"
              },
              {
                "_id": "61994c12c2b3164f924883e0",
                "type": "expense",
                "category": "products",
                "comment": "chips",
                "amount": 100,
                "date": "2021-02-01",
                "owner": "61994b7dc2b3164f924883cc",
                "createdAt": "2021-11-20T19:26:46.106Z",
                "updatedAt": "2021-11-20T19:26:46.106Z"
              },
              {
                "_id": "61994c12c2b3164f924883e0",
                "type": "expense",
                "category": "hobby",
                "comment": "bike",
                "amount": 2570,
                "date": "2021-02-01",
                "owner": "61994b7dc2b3164f924883cc",
                "createdAt": "2021-11-20T19:26:46.106Z",
                "updatedAt": "2021-11-20T19:26:46.106Z"
              },
              {
                "total": 12300,
                "balance": 25200
              }
            ]
          }
        }
      },
      "TransactionUpdateResponse": {
        "type": "object",
        "description": "All user's transactions",
        "properties": {
          "data": {
            "type": "object",
            "description": "Updated transaction data",
            "properties": {
              "transaction": {
                "type": "object",
                "description": "User's current balance",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["expense", "income"],
                    "description": "Type of user's transaction",
                    "example": "expense"
                  },
                  "category": {
                    "type": "string",
                    "enum": [
                      "salary",
                      "additional",
                      "products",
                      "alcohol",
                      "entertainment",
                      "healthy",
                      "transport",
                      "home",
                      "technic",
                      "communication",
                      "hobby",
                      "education",
                      "other"
                    ],
                    "description": "Category of user's transaction",
                    "example": "products"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Description of user's transaction",
                    "example": "Pork",
                    "default": ""
                  },
                  "amount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Amount of user's transaction",
                    "example": 1000
                  },
                  "date": {
                    "type": "string",
                    "description": "Date of user's transaction",
                    "example": "2021-12-12"
                  }
                }
              },
              "balance": {
                "type": "integer",
                "format": "int32",
                "description": "User's current balance",
                "example": 25200
              }
            }
          }
        }
      },
      "TransactionObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["expense", "income"],
            "description": "Type of user's transaction",
            "example": "expense"
          },
          "category": {
            "type": "string",
            "enum": [
              "salary",
              "additional",
              "products",
              "alcohol",
              "entertainment",
              "healthy",
              "transport",
              "home",
              "technic",
              "communication",
              "hobby",
              "education",
              "other"
            ],
            "description": "Category of user's transaction",
            "example": "products"
          },
          "comment": {
            "type": "string",
            "description": "Description of user's transaction",
            "example": "Pork",
            "default": ""
          },
          "amount": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of user's transaction",
            "example": 1000
          },
          "date": {
            "type": "string",
            "description": "Date of user's transaction",
            "example": "2021-12-12"
          }
        }
      },
      "DevelopersResponse": {
        "type": "object",
        "description": "All developers",
        "properties": {
          "result": {
            "type": "object",
            "description": "Developer object",
            "properties": {
              "fullName": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "Developer's first name",
                    "example": "Bill"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Developer's last name",
                    "example": "Gates"
                  }
                }
              },
              "_id": {
                "type": "string",
                "description": "Developer's ID",
                "example": "61ae3def08ce2620f4b47914"
              },
              "avatarUrl": {
                "type": "string",
                "description": "Developer's avatar URL",
                "example": "https://live.staticflickr.com/65535/51357338839_fc0b295628_m.jpg"
              },
              "role": {
                "type": "object",
                "description": "Developer's role",
                "enum": [
                  "Backend Developer",
                  "Frontend Developer",
                  "Scrum Master",
                  "Team Lead"
                ],
                "example": ["Backend Developer"]
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "Developer's email",
                "example": "bill.gates@gmail.com"
              },
              "linkedinLink": {
                "type": "string",
                "description": "Developer's LinkedIn Profile Link",
                "example": "https://www.linkedin.com/in/bill-gates-118405aa/"
              },
              "gitLink": {
                "type": "string",
                "description": "Developer's Git Hub Profile Link",
                "example": "https://github.com/bill-gates/"
              }
            },
            "example": [
              {
                "fullName": {
                  "firstName": "Volodymyr",
                  "lastName": "Marchuk"
                },
                "_id": "61ae3def08ce2620f4b47911",
                "avatarUrl": "https://live.staticflickr.com/65535/51355167858_ab0f985c23_n.jpg",
                "role": ["Backend Developer"],
                "email": "mr.volodymyr.marchuk@gmail.com",
                "linkedinLink": "https://www.linkedin.com/in/volodymyr-marchuk-a0592320a/",
                "gitLink": "https://github.com/vomarchuk"
              },
              {
                "fullName": {
                  "firstName": "Nataliia",
                  "lastName": "Valko"
                },
                "_id": "61ae3def08ce2620f4b47912",
                "avatarUrl": "https://live.staticflickr.com/65535/51356630753_5f59dec961_n.jpg",
                "role": ["Team Lead", "Frontend Developer"],
                "email": "nataliiavalko.vnv@gmail.com",
                "linkedinLink": "https://www.linkedin.com/in/nataliia-valko-951501212/",
                "gitLink": "https://github.com/NataliiaValko"
              },
              {
                "fullName": {
                  "firstName": "Nikolay",
                  "lastName": "Mosalov"
                },
                "_id": "61ae3def08ce2620f4b47913",
                "avatarUrl": "https://live.staticflickr.com/65535/51355167828_34e6d20320_n.jpg",
                "role": ["Scrum Master", "Frontend Developer"],
                "email": "Mosalov85@gmail.com",
                "linkedinLink": "https://www.linkedin.com/in/nikolay-mosalov-66679b212/",
                "gitLink": "https://github.com/Rom-dev-tech"
              }
            ]
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
