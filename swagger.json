{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "Kapu$ta Project",
    "description": "This is a back-end documentation for [Kapu$ta Project](https://cabbage-project.netlify.app/) performed by Adamants team.\nYou can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "noreply.wallet.adamants@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "basePath": "https://adamants-wallet-project-back.herokuapp.com/api",
  "servers": [
    {
      "url": "https://adamants-wallet-project-back.herokuapp.com/api",
      "description": "Production live server"
    },
    {
      "url": "http://localhost:4000/api",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Users operations"
    },
    {
      "name": "Transactions",
      "description": "Transactions operations"
    }
  ],
  "paths": {
    "/users/registration": {
      "post": {
        "tags": ["Users"],
        "summary": "Register new user",
        "description": "This can only be done by not already registered user.",
        "operationId": "registration",
        "produces": ["application/json"],
        "requestBody": {
          "required": true,
          "description": "Valid user registration body object",
          "content": {
            "application/json": {
              "schema":  {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Valid email with min 2 domains",
                    "example": "john.doe@gmail.com",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "description": "Valid password length: 8-12, must contain  lowerCase: 1,  upperCase: 1, numeric: 1, symbol: 1,",
                    "example": "Hello123-"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful user registration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "User email",
                          "example": "john.doe@gmail.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User with same email already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "User with same email already exists.",
                    "status": "Error",
                    "code": "400"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "example": {
                "message": "Internal server error.",
                "status": "Error",
                "code": "500"
              }
            }
          }
        }
      }
    },
    "/users/verify/{verificationToken}": {
      "get": {
        "tags": ["Users"],
        "summary": "Verify user email",
        "description": "This can only be done by registered user.",
        "operationId": "verify",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "verificationToken",
            "type": "string",
            "description": "User verification token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Verification successfull",
            "schema": {
              "example": {
                "message": "Verification successfull"
              }
            }
          },
          "404": {
            "description": "User not found or email already verified",
            "schema": {
              "example": {
                "message": "User not found",
                "status": "Error",
                "code": "404"
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Login user into the application",
        "description": "This can only be done by user with verified email.",
        "operationId": "login",
        "produces": ["application/json"],
        "requestBody": {
          "required": true,
          "description": "Valid user registration body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful user login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Email or password is wrong",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Email or password is wrong",
                    "status": "Error",
                    "code": "400"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Email is not verified",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "User email is not verified",
                    "status": "Error",
                    "code": "403"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/refresh": {
      "post": {
        "tags": ["Users"],
        "summary": "Refresh tokens",
        "description": "Refresh user tokens in case of 401 Unauthorized server response",
        "operationId": "refresh",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "refreshToken",
            "in": "header",
            "description": "Valid refreshToken from cookies",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful refresh",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error in refresh token in cookie",
            "schema": {
              "example": {
                "message": "Bad request",
                "status": "Error",
                "code": "400"
              }
            }
          },
          "401": {
            "description": "Refresh token expired and user needs to log in",
            "schema": {
              "example": {
                "message": "Unauthorized",
                "status": "Error",
                "code": "401"
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "Logout current logged in user",
        "description": "Logout current logged in user",
        "operationId": "logout",
        "security": [{"Bearer":[]}, {"refreshToken": []}],
        "produces": ["application/json"],
        "responses": {
          "204": {
            "description": "Successful logout"
          },
          "400": {
            "description": "Error in access/refresh token in header/cookie",
            "schema": {
              "example": {
                "message": "Bad request",
                "status": "Error",
                "code": "400"
              }
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "example": {
                "message": "User not found",
                "status": "Error",
                "code": "404"
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Get current user info",
        "description": "This can only be done by not already logged in user.",
        "operationId": "current",
        "security": [{"Bearer":[]}],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful request to get user info ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Unauthorized: TokenExpiredError: jwt expired.",
                    "status": "Error",
                    "code": "401"
                  }
                }
              }
            }
           
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update user information",
        "description": "This can only be done by logged in user.",
        "operationId": "update",
        "security": [{"Bearer":[]}],

        "produces": ["application/json"],
        "requestBody": {
            "type": "object",
            "description": "Valid user update body object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateRequest"
                }
              }
            }
          },
        "responses": {
          "200": {
            "description": "Successful user update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Some body validation errors / Updating of user balance not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "User balance is already setted",
                    "status": "Error",
                    "code": "400"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/avatar": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update user avatar with avatar file in from-data",
        "description": "This can only be done by logged in user.",
        "operationId": "avatar",
        "security": [{"Bearer":[]}],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "formData",
            "name": "avatar",
            "type": "file",
            "description": "Single image file with valid MIME-type",
            "required": true,
            "schema": {
              "type": "file",
              "required": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful user avatar update",
            "content": {
              "application/json": {
                "schema": {
                   "example": {
                    "message": "success",               
                    "data": {
                        "avatar": "https://drive.google.com/drive/folders/162F92a-sm6MX8k96Jc59KCtf0NtXkdM4"
                    }
                   } 
                }
              }
            }
          },
          "400": {
            "description": "Some file validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Wrong MIME-type",
                    "status": "Error",
                    "code": "400"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/invite": {
      "post": {
        "tags": ["Users"],
        "summary": "Invite friend to join application",
        "description": "User can invite friend to this Application. Friend will receive invitation email with link.",
        "operationId": "invite",
        "security": [{"Bearer":[]}],
        "produces": ["application/json"],
        "requestBody": {
            "type": "object",
            "description": "Valid invitation body object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "friendEmail": {
                      "type": "string",
                      "description": "Valid friend`s email with min 2 domains",
                      "format": "email",
                      "example": "denis.bestmentor@gmail.com"
                    },
                    "friendName": {
                      "type": "string",
                      "description": "Valid friend name",
                      "example": "Denis Hvorostyaniy"
                    }
                  }
                }
              }
            }
          },
        "responses": {
          "200": {
            "description": "Successful friend invitation",
            "schema": {
              "example": {
                "message": "Invitation successful."
              }
            }
          },
          "400": {
            "description": "Some body errors (no friendEmail or friendName).",
            "schema": {
              "example": {
                "message": "friendEmail/friendName is required.",
                "status": "Error",
                "code": "400"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserLoginResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User email",
                    "example": "john.doe@gmail.com"
                  },
                  "fullName": {
                    "type": "object",
                    "properties": {
                      "firstName": {
                        "type": "string",
                        "description": "User first name",
                        "default": null,
                        "example": "John"
                      },
                      "lastName": {
                        "type": "string",
                        "description": "User last name",
                        "default": null,
                        "example": "Doe"
                      }
                    }
                  },
                  "balance": {
                    "type": "integer",
                    "description": "User balance",
                    "default": 0,
                    "example": 15000
                  },
                  "isBalanceSetted": {
                    "type": "boolean",
                    "description": "This field shows that user set up his balance",
                    "default": false,
                    "example": true
                  },
                  "phone": {
                    "type": "string",
                    "description": "User phone number",
                    "default": null,
                    "example": "+38(050)1234567"
                  },
                  "avatar": {
                    "type": "string",
                    "description": "User avatar",
                    "default": null,
                    "example": "https://www.google.com/imgres?imgurl=https%3A%2F%2Fupload.wikimedia.org"
                  },
                  "settings": {
                    "type": "object",
                    "properties": {
                      "language": {
                        "type": "string",
                        "description": "User's language",
                        "default": "ru",
                        "enum": [
                          "ru",
                          "en",
                          "ua"
                        ],    
                        "example": "en"
                      },
                      "theme": {
                        "type": "string",
                        "description": "User's application theme",
                        "default": "light",
                        "enum": [
                          "light",
                          "dark"
                        ],    
                        "example": "light"
                      },
                      "currency": {
                        "type": "string",
                        "description": "User's selected currency",
                        "default": "UAH",
                        "enum": [
                          "UAH",
                          "USD",
                          "RUB",
                          "EUR"
                        ],    
                        "example":  "UAH"
                      }
                    }
                  }
                }
              }
            }
          },
          "accessToken": {
            "type": "string",
            "description": "User's access token from server",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYX"
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
              "fullName": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "User first name",
                    "default": null,
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "User last name",
                    "default": null,
                    "example": "Doe"
                  }
                }
              },
              "balance": {
                "type": "integer",
                "format": "int32",
                "description": "User balance !!! Allow to be set up ONLY one time after registration !!!",
                "default": 0,
                "example": 15000
              },
              "phone": {
                "type": "string",
                "description": "User phone number",
                "default": null,
                "example": "+38(050)1234567"
              },
              "avatar": {
                "type": "string",
                "description": "User avatar",
                "default": null,
                "example": "https://www.google.com/imgres?imgurl=https%3A%2F%2Fupload.wikimedia.org"
              },
              "settings": {
                "type": "object",
                "properties": {
                  "language": {
                    "type": "string",
                    "description": "User's language",
                    "default": "ru",
                    "enum": [
                      "ru",
                      "en",
                      "ua"
                    ],    
                    "example": "en"
                  },
                  "theme": {
                    "type": "string",
                    "description": "User's application theme",
                    "default": "light",
                    "enum": [
                      "light",
                      "dark"
                    ],    
                    "example": "light"
                  },
                  "currency": {
                    "type": "string",
                    "description": "User's selected currency",
                    "default": "UAH",
                    "enum": [
                      "UAH",
                      "USD",
                      "RUB",
                      "EUR"
                    ],    
                    "example":  "UAH"
                  }
                }
              
            
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "refreshToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
